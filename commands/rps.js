// commands/rps.js

const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType, MessageFlags, EmbedBuilder } = require('discord.js');
const fs = require('node:fs');
const path = require('node:path');

// Constants for file paths and game timeouts
const DATA_FILE = path.join(__dirname, '..', 'data.json');
const GAME_TIMEOUT_MS = 60_000; // 60 seconds for join/choice

// Map to store active game states. Key: publicMessageId
const activeGames = new Map(); // Key: publicMessageId, Value: { game_object }
const userActiveGames = new Map(); // Key: userId, Value: publicMessageId (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡πÑ‡∏´‡∏ô)

// --- Helper Functions ---

/**
 * Reads game data from the JSON file.
 * @returns {object} The parsed data or a default structure if an error occurs.
 */
function readData() {
    try {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        const parsedData = JSON.parse(data);
        // Ensure playerStats exists
        if (!parsedData.playerStats) {
            parsedData.playerStats = {};
        }
        return parsedData;
    } catch (error) {
        if (error.code === 'ENOENT') { // File not found
            console.log('data.json not found, creating new one.');
            return { gameResults: [], playerStats: {} };
        }
        console.error('Error reading data.json:', error.message);
        return { gameResults: [], playerStats: {} }; // Return a default empty structure
    }
}

/**
 * Writes game data to the JSON file.
 * @param {object} data The data object to write.
 */
function writeData(data) {
    try {
        fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 4), 'utf8');
    } catch (error) {
        console.error('Error writing data.json:', error.message);
    }
}

/**
 * Cleans up a game from activeMaps
 * @param {string} publicMessageId The ID of the public message associated with the game.
 * @param {string} challengerId The ID of the challenger.
 * @param {string} opponentId The ID of the opponent (optional).
 */
function cleanupGame(publicMessageId, challengerId, opponentId = null) {
    activeGames.delete(publicMessageId);
    userActiveGames.delete(challengerId);
    if (opponentId) {
        userActiveGames.delete(opponentId);
    }
}

/**
 * Updates player statistics after a game.
 * @param {string} userId The ID of the player.
 * @param {string} username The username of the player.
 * @param {boolean} isWinner True if the player won, false if lost.
 */
function updatePlayerStats(userId, username, isWinner) {
    const data = readData();
    if (!data.playerStats[userId]) {
        data.playerStats[userId] = {
            username: username,
            played: 0,
            wins: 0,
            losses: 0
        };
    }

    data.playerStats[userId].played++;
    data.playerStats[userId].username = username; // Update username in case it changed

    if (isWinner) {
        data.playerStats[userId].wins++;
    } else {
        data.playerStats[userId].losses++;
    }
    writeData(data);
}


// --- Main Command Logic ---

module.exports = {
    // Define the slash command
    data: new SlashCommandBuilder()
        .setName('rps')
        .setDescription('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏™‡∏∏‡∏î‡∏°‡∏±‡∏ô‡∏™‡πå! ‡πÉ‡∏Ñ‡∏£‡∏Å‡πá‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!'),

    /**
     * Executes the RPS command.
     * @param {Interaction} interaction The interaction object.
     */
    async execute(interaction) {
        const challenger = interaction.user; // The user who initiated the command (Player 1)

        // Check if the challenger is already in another game
        if (userActiveGames.has(challenger.id)) {
            return interaction.reply({
                content: '‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞.',
                flags: MessageFlags.Ephemeral
            });
        }

        // Create "Join Game" and "Cancel Game" buttons
        const joinGameButton = new ButtonBuilder()
            .setCustomId(`rps_join_${challenger.id}`)
            .setLabel('üéÆ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏î‡∏ß‡∏•!')
            .setStyle(ButtonStyle.Primary);

        const cancelGameButton = new ButtonBuilder()
            .setCustomId(`rps_cancel_${challenger.id}`)
            .setLabel('üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡∏°')
            .setStyle(ButtonStyle.Danger);

        const actionRow = new ActionRowBuilder().addComponents(joinGameButton, cancelGameButton);

        // --- Initial Public Challenge Embed ---
        const initialEmbed = new EmbedBuilder()
            .setColor(0xFFA500) // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏ó‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏î‡πÉ‡∏™
            .setTitle('‚ú® ‡∏Ç‡∏≠‡πÄ‡∏ä‡∏¥‡∏ç‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏î‡∏ß‡∏•‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö! ‚ú®')
            .setDescription(`‡∏ú‡∏π‡πâ‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç **${challenger.username}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡πÉ‡∏ô‡∏ï‡∏≥‡∏ô‡∏≤‡∏ô!`)
            .addFields(
                { name: 'ü§î ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?', value: '‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏Ñ‡πà‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° **"üéÆ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏î‡∏ß‡∏•!"** ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!', inline: false },
                { name: '‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≥‡∏Å‡∏±‡∏î', value: `‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ **${GAME_TIMEOUT_MS / 1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ**`, inline: false }
            )
            .setThumbnail('https://cdn-icons-png.flaticon.com/512/3221/3221087.png') // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö
            .setTimestamp() // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
            .setFooter({ text: `‡∏ú‡∏π‡πâ‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•: ${challenger.username}`, iconURL: challenger.displayAvatarURL() });

        await interaction.reply({
            embeds: [initialEmbed],
            components: [actionRow],
        });
        const publicMessage = await interaction.fetchReply(); // fetchReply() ‡πÄ‡∏õ‡πá‡∏ô method ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å

        // Store initial game state in activeGames map
        const gameData = {
            challengerId: challenger.id,
            opponentId: null, // No opponent yet
            challengerChoice: null,
            opponentChoice: null,
            channelId: interaction.channelId,
            publicMessageId: publicMessage.id,
            challengerInteraction: interaction, // Store original interaction for followUp
            opponentInteraction: null, // Will store opponent's interaction later
            timestamp: Date.now() // For timeout tracking
        };
        activeGames.set(publicMessage.id, gameData);
        userActiveGames.set(challenger.id, publicMessage.id); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ challenger ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ

        // --- Collector for "Join Game" and "Cancel Game" buttons ---
        const joinCollector = publicMessage.createMessageComponentCollector({
            componentType: ComponentType.Button,
            filter: i => i.customId.startsWith('rps_join_') || i.customId.startsWith('rps_cancel_'),
            time: GAME_TIMEOUT_MS,
            max: 1 // Only one successful join or cancel is needed
        });

        joinCollector.on('collect', async i => {
            joinCollector.stop(); // Stop this collector immediately after a button is pressed

            const game = activeGames.get(publicMessage.id);
            if (!game) {
                const expiredEmbed = new EmbedBuilder()
                    .setColor(0x808080) // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤
                    .setTitle('üïí ‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß!')
                    .setDescription('‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞.')
                    .setTimestamp();
                return i.update({
                    embeds: [expiredEmbed],
                    components: []
                }).catch(() => {});
            }

            if (i.customId.startsWith('rps_join_')) {
                const opponent = i.user; // The user who pressed the join button (Player 2)

                // Prevent challenger from joining their own game
                if (opponent.id === challenger.id) {
                    await i.reply({
                        content: '‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏∞! ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢.',
                        flags: MessageFlags.Ephemeral
                    });
                    // Re-start the join collector as this interaction was invalid
                    startJoinCollector(publicMessage, challenger);
                    return;
                }
                // Prevent opponent from joining if already in another game
                if (userActiveGames.has(opponent.id)) { // ‡πÉ‡∏ä‡πâ userActiveGames ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ
                    await i.reply({
                        content: '‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà! ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞.',
                        flags: MessageFlags.Ephemeral
                    });
                    // Re-start the join collector as this interaction was invalid
                    startJoinCollector(publicMessage, challenger);
                    return;
                }

                // Update game state with opponent's info
                game.opponentId = opponent.id;
                game.opponentInteraction = i; // Store opponent's interaction for ephemeral replies
                userActiveGames.set(opponent.id, publicMessage.id); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ opponent ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ

                // --- Update Public Message to Game Started Embed ---
                const gameStartedEmbed = new EmbedBuilder()
                    .setColor(0x00BFFF) // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏î‡πÉ‡∏™
                    .setTitle('ü§ù ‡∏Å‡∏≤‡∏£‡∏î‡∏ß‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ü§ù')
                    .setDescription(`‡∏ú‡∏π‡πâ‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏• **${challenger.username}** ‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö **${opponent.username}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n\n‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`)
                    .setThumbnail('https://cdn-icons-png.flaticon.com/512/11096/11096898.png') // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ
                    .setTimestamp()
                    .setFooter({ text: '‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢!', iconURL: interaction.client.user.displayAvatarURL() });

                await i.update({
                    embeds: [gameStartedEmbed],
                    components: [] // Remove join/cancel buttons
                });

                // Create Rock/Paper/Scissors choice buttons
                const choiceButtonsRow = new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId('choice_rock').setLabel('‚úä ‡∏Ñ‡πâ‡∏≠‡∏ô').setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('choice_paper').setLabel('‚úã ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©').setStyle(ButtonStyle.Primary),
                    new ButtonBuilder().setCustomId('choice_scissors').setLabel('‚úåÔ∏è ‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£').setStyle(ButtonStyle.Primary),
                );

                // Send ephemeral choice messages to both players
                await game.challengerInteraction.followUp({
                    content: `‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢:`,
                    components: [choiceButtonsRow],
                    flags: MessageFlags.Ephemeral // Only visible to the challenger
                });

                await game.opponentInteraction.followUp({
                    content: `‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢:`,
                    components: [choiceButtonsRow],
                    flags: MessageFlags.Ephemeral // Only visible to the opponent
                });

                // Update game state in the map (important for the choice collector)
                activeGames.set(publicMessage.id, game);

                // --- Collector for Rock/Paper/Scissors choices ---
                const choiceCollector = publicMessage.channel.createMessageComponentCollector({
                    componentType: ComponentType.Button,
                    filter: ci => (ci.user.id === game.challengerId || ci.user.id === game.opponentId) && ci.customId.startsWith('choice_'),
                    time: GAME_TIMEOUT_MS,
                    max: 2, // We need two choices (one from each player)
                    dispose: true // Ensure collector emits 'remove' when components are removed
                });

                const choiceEmojis = {
                    'rock': '‚úä',
                    'paper': '‚úã',
                    'scissors': '‚úåÔ∏è'
                };

                choiceCollector.on('collect', async choiceInteraction => {
                    const currentGame = activeGames.get(publicMessage.id);
                    if (!currentGame) return; // Game might have already ended/timed out

                    const choice = choiceInteraction.customId.replace('choice_', '');

                    // Determine which player made the choice and store it
                    if (choiceInteraction.user.id === currentGame.challengerId) {
                        if (currentGame.challengerChoice) {
                            // Player already made a choice, prevent re-selection
                            await choiceInteraction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ.', flags: MessageFlags.Ephemeral });
                            return;
                        }
                        currentGame.challengerChoice = choice;
                    } else if (choiceInteraction.user.id === currentGame.opponentId) {
                        if (currentGame.opponentChoice) {
                            // Player already made a choice, prevent re-selection
                            await choiceInteraction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ.', flags: MessageFlags.Ephemeral });
                            return;
                        }
                        currentGame.opponentChoice = choice;
                    } else {
                        // Someone else tried to interact with the choice buttons
                        await choiceInteraction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ!', flags: MessageFlags.Ephemeral });
                        return;
                    }

                    // Update the ephemeral message for the player who just chose
                    await choiceInteraction.update({
                        content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${choiceEmojis[choice]} ‚úÖ`,
                        components: [] // Remove choice buttons after selection
                    });

                    // Update game state in the map
                    activeGames.set(publicMessage.id, currentGame);

                    // If both players have made their choices, stop the collector
                    if (currentGame.challengerChoice && currentGame.opponentChoice) {
                        choiceCollector.stop();
                    }
                });

                choiceCollector.on('end', async (collected, reason) => {
                    const game = activeGames.get(publicMessage.id);
                    if (!game) return; // Game already processed or cleaned up

                    // Ensure we have the opponent's user object for messages
                    const opponentUser = await interaction.client.users.fetch(game.opponentId).catch(() => null);

                    // Handle cases where choices weren't made within the time limit
                    if (!game.challengerChoice || !game.opponentChoice) {
                        let missingPlayers = [];
                        if (!game.challengerChoice) missingPlayers.push(challenger.username);
                        if (!game.opponentChoice && opponentUser) missingPlayers.push(opponentUser.username);
                        else if (!game.opponentChoice) missingPlayers.push('‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'); // Fallback if opponent user object isn't found

                        const timeoutEmbed = new EmbedBuilder()
                            .setColor(0xCD5C5C) // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡∏¥‡∏ê
                            .setTitle('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤!')
                            .setDescription(`‚ùå ‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: **${missingPlayers.join(' ‡πÅ‡∏•‡∏∞ ')}** ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≤‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î.`)
                            .setTimestamp();

                        await publicMessage.edit({
                            embeds: [timeoutEmbed],
                            components: []
                        }).catch(() => {});

                        // Attempt to delete ephemeral choice messages
                        try {
                            if (game.challengerInteraction.replied || game.challengerInteraction.deferred) {
                                const messages = await game.challengerInteraction.channel.messages.fetch({ limit: 5 });
                                const ephemeralMessage = messages.find(m =>
                                    m.interaction?.id === game.challengerInteraction.id && m.flags.has(MessageFlags.Ephemeral)
                                );
                                if (ephemeralMessage) await ephemeralMessage.delete();
                            }
                        } catch (err) {
                            console.error('Failed to delete challenger ephemeral reply:', err.message);
                        }
                        try {
                            if (game.opponentInteraction && (game.opponentInteraction.replied || game.opponentInteraction.deferred)) {
                                const messages = await game.opponentInteraction.channel.messages.fetch({ limit: 5 });
                                const ephemeralMessage = messages.find(m =>
                                    m.interaction?.id === game.opponentInteraction.id && m.flags.has(MessageFlags.Ephemeral)
                                );
                                if (ephemeralMessage) await ephemeralMessage.delete();
                            }
                        } catch (err) {
                            console.error('Failed to delete opponent ephemeral reply:', err.message);
                        }

                        cleanupGame(publicMessage.id, game.challengerId, game.opponentId); // Clean up game state
                        return;
                    }

                    // Both players have chosen, determine the winner!
                    const p1Choice = game.challengerChoice;
                    const p2Choice = game.opponentChoice;

                    let resultText;
                    let winnerId = null;
                    let resultColor;
                    let resultThumbnail;

                    if (p1Choice === p2Choice) {
                        resultText = '‡πÄ‡∏™‡∏°‡∏≠!';
                        resultColor = 0x808080; // ‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏°‡∏≠
                        resultThumbnail = 'https://cdn-icons-png.flaticon.com/512/1862/1862217.png'; // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
                        // Update stats for a draw (both played, no win/loss)
                        updatePlayerStats(challenger.id, challenger.username, false); // Just played, not win
                        updatePlayerStats(opponentUser.id, opponentUser.username, false); // Just played, not win
                    } else if (
                        (p1Choice === 'rock' && p2Choice === 'scissors') ||
                        (p1Choice === 'paper' && p2Choice === 'rock') ||
                        (p1Choice === 'scissors' && p2Choice === 'paper')
                    ) {
                        resultText = `üéâ **${challenger.username}** ‡∏ä‡∏ô‡∏∞!`;
                        winnerId = challenger.id;
                        resultColor = 0x00FF00; // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
                        resultThumbnail = challenger.displayAvatarURL(); // ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
                        // Update stats for challenger win, opponent loss
                        updatePlayerStats(challenger.id, challenger.username, true);
                        updatePlayerStats(opponentUser.id, opponentUser.username, false);
                    } else {
                        resultText = `üéâ **${opponentUser.username}** ‡∏ä‡∏ô‡∏∞!`;
                        winnerId = opponentUser.id;
                        resultColor = 0xFF0000; // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
                        resultThumbnail = opponentUser.displayAvatarURL(); // ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
                        // Update stats for opponent win, challenger loss
                        updatePlayerStats(challenger.id, challenger.username, false);
                        updatePlayerStats(opponentUser.id, opponentUser.username, true);
                    }

                    // --- Result Embed ---
                    const resultEmbed = new EmbedBuilder()
                        .setColor(resultColor)
                        .setTitle('üèÜ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏ß‡∏•‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö! üèÜ')
                        .setDescription(`‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏à‡∏ö‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞!`)
                        .addFields(
                            { name: `${challenger.username} ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`, value: `\`${choiceEmojis[p1Choice]} ${p1Choice.toUpperCase()}\``, inline: true },
                            { name: `${opponentUser.username} ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å`, value: `\`${choiceEmojis[p2Choice]} ${p2Choice.toUpperCase()}\``, inline: true },
                            { name: '\u200B', value: '\u200B', inline: false }, // ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                            { name: 'üåü ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', value: `**${resultText}**`, inline: false },
                        )
                        .setThumbnail(resultThumbnail)
                        .setTimestamp()
                        .setFooter({ text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏£‡πà‡∏ß‡∏°‡∏™‡∏ô‡∏∏‡∏Å! ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠!', iconURL: interaction.client.user.displayAvatarURL() });

                    await publicMessage.edit({
                        embeds: [resultEmbed],
                        components: [] // Remove all buttons
                    }).catch(() => {});

                    // Save game results to the JSON file (historical data)
                    const data = readData();
                    data.gameResults.push({
                        timestamp: new Date().toISOString(),
                        gameType: 'PvP_PublicJoin',
                        player1: { id: challenger.id, username: challenger.username, choice: p1Choice },
                        player2: { id: opponentUser.id, username: opponentUser.username, choice: p2Choice },
                        result: resultText,
                        winnerId: winnerId
                    });
                    writeData(data);

                    cleanupGame(publicMessage.id, game.challengerId, game.opponentId); // Clean up game state
                });

            } else if (i.customId.startsWith('rps_cancel_')) {
                // Challenger pressed the "Cancel Game" button
                const gameChallengerId = i.customId.split('_')[2];
                if (i.user.id !== gameChallengerId) {
                    await i.reply({
                        content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞!',
                        flags: MessageFlags.Ephemeral
                    });
                    // Re-start the join collector if someone else tried to cancel
                    startJoinCollector(publicMessage, challenger);
                    return;
                }

                // --- Cancel Game Embed ---
                const cancelEmbed = new EmbedBuilder()
                    .setColor(0xDC143C) // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°
                    .setTitle('üö´ ‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß!')
                    .setDescription(`‡∏ú‡∏π‡πâ‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏• **${challenger.username}** ‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞.`)
                    .setTimestamp()
                    .setFooter({ text: '‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏™‡∏¥!', iconURL: interaction.client.user.displayAvatarURL() });

                await i.update({
                    embeds: [cancelEmbed],
                    components: []
                });
                cleanupGame(publicMessage.id, challenger.id); // Clean up game state
            }
        });

        // --- Handle Timeout for no one joining/cancelling ---
        joinCollector.on('end', async (collected, reason) => {
            if (reason === 'time' && !collected.size) {
                // If the collector ended due to time and no buttons were collected
                const game = activeGames.get(publicMessage.id);
                if (game && !game.opponentId) { // Check if game still exists and no opponent joined
                    const timeoutNoJoinEmbed = new EmbedBuilder()
                        .setColor(0xFFA500) // ‡∏™‡∏µ‡∏™‡πâ‡∏°
                        .setTitle('üí§ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏•‡∏¢..')
                        .setDescription(`**${challenger.username}** ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î! ‡πÄ‡∏Å‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡πà‡∏∞.`)
                        .setTimestamp()
                        .setFooter({ text: '‡∏•‡∏≠‡∏á‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π‡∏ô‡∏∞!', iconURL: interaction.client.user.displayAvatarURL() });

                    await publicMessage.edit({
                        embeds: [timeoutNoJoinEmbed],
                        components: []
                    });
                    cleanupGame(publicMessage.id, game.challengerId); // Clean up game state
                }
            }
        });

        /**
         * Helper function to re-create the join collector.
         * This is used when an invalid interaction (e.g., challenger joining their own game) occurs.
         * @param {Message} message The public message to attach the collector to.
         * @param {User} challengerUser The original challenger's user object.
         */
        const startJoinCollector = (message, challengerUser) => {
            const newJoinCollector = message.createMessageComponentCollector({
                componentType: ComponentType.Button,
                filter: i => i.customId.startsWith('rps_join_') || i.customId.startsWith('rps_cancel_'),
                time: GAME_TIMEOUT_MS,
                max: 1
            });

            newJoinCollector.on('collect', async i => {
                newJoinCollector.stop(); // Stop this new collector
                joinCollector.emit('collect', i); // Re-emit the collected interaction to the original joinCollector
            });

            newJoinCollector.on('end', async (collected, reason) => {
                // Re-implement the timeout logic for the new collector
                if (reason === 'time' && !collected.size) {
                    const game = activeGames.get(message.id);
                    if (game && !game.opponentId) {
                        const timeoutNoJoinEmbed = new EmbedBuilder()
                            .setColor(0xFFA500) // ‡∏™‡∏µ‡∏™‡πâ‡∏°
                            .setTitle('üí§ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏•‡∏¢..')
                            .setDescription(`**${challengerUser.username}** ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏î‡∏ß‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î! ‡πÄ‡∏Å‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡πà‡∏∞.`)
                            .setTimestamp()
                            .setFooter({ text: '‡∏•‡∏≠‡∏á‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏π‡∏ô‡∏∞!', iconURL: message.client.user.displayAvatarURL() });

                        await message.edit({
                            embeds: [timeoutNoJoinEmbed],
                            components: []
                        });
                        cleanupGame(message.id, game.challengerId);
                    }
                }
            });
        };
    },
};