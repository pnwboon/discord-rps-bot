// commands/rps-check.js

const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const fs = require('node:fs');
const path = require('node:path');

const DATA_FILE = path.join(__dirname, '..', 'data.json');

/**
 * Reads game data from the JSON file.
 * @returns {object} The parsed data or a default structure if an error occurs.
 */
function readData() {
    try {
        const data = fs.readFileSync(DATA_FILE, 'utf8');
        const parsedData = JSON.parse(data);
        // Ensure playerStats exists
        if (!parsedData.playerStats) {
            parsedData.playerStats = {};
        }
        return parsedData;
    } catch (error) {
        if (error.code === 'ENOENT') { // File not found
            console.log('data.json not found for rps-check, returning empty.');
            return { gameResults: [], playerStats: {} };
        }
        console.error('Error reading data.json for rps-check:', error.message);
        return { gameResults: [], playerStats: {} };
    }
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('rpscheck')
        .setDescription('‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß!'),

    async execute(interaction) {
        const data = readData();
        const playerStats = data.playerStats || {};
        const userId = interaction.user.id;
        const currentUserStats = playerStats[userId];

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ---
        let personalStatsText = '';
        if (currentUserStats && currentUserStats.played > 0) {
            const winRate = ((currentUserStats.wins / currentUserStats.played) * 100).toFixed(2);
            personalStatsText = `**‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:**\n` +
                                `‚öîÔ∏è ‡πÄ‡∏•‡πà‡∏ô: \`${currentUserStats.played}\` ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                                `‚úÖ ‡∏ä‡∏ô‡∏∞: \`${currentUserStats.wins}\` ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                                `‚ùå ‡πÅ‡∏û‡πâ: \`${currentUserStats.losses}\` ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n` +
                                `üìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏∞: \`${winRate}%\`\n`;
        } else {
            personalStatsText = '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ `/rps` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏¥!\n';
        }

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Leaderboard ---
        const sortedPlayers = Object.values(playerStats)
            .filter(p => p.played > 0) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            .sort((a, b) => b.wins - a.wins || b.played - a.played); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏∞‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î, ‡∏ñ‡πâ‡∏≤‡∏ä‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô

        const topPlayers = sortedPlayers.slice(0, 10); // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å

        let leaderboardText = '\n**üèÜ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏¢‡∏≠‡∏î‡∏ù‡∏µ‡∏°‡∏∑‡∏≠! üèÜ**\n';
        if (topPlayers.length === 0) {
            leaderboardText += '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏™‡∏¥!';
        } else {
            for (let i = 0; i < topPlayers.length; i++) {
                const player = topPlayers[i];
                leaderboardText += `**${i + 1}. ${player.username}** - ‡∏ä‡∏ô‡∏∞: \`${player.wins}\` | ‡πÄ‡∏•‡πà‡∏ô: \`${player.played}\`\n`;
            }
        }

        // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ---
        const combinedEmbed = new EmbedBuilder()
            .setColor(0x8B008B) // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
            .setTitle('‚ú® ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥ ‚ú®')
            .setDescription(personalStatsText + '\n' + leaderboardText) // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞ leaderboard
            .setThumbnail(interaction.user.displayAvatarURL()) // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            .setTimestamp()
            .setFooter({ text: '‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡∏ô‡∏∞!', iconURL: interaction.client.user.displayAvatarURL() });

        await interaction.reply({ embeds: [combinedEmbed] });
    },
};